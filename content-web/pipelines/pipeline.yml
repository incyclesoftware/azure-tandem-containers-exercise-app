trigger:
  branches:
    include:
    - main
  paths:
    include:
    - /content-web

resources:
- repo: self

variables:
  - template: variables.user.yml

  - { name: dockerfilePath, value: '**/content-web/src/Dockerfile' }

  # Agent VM image name
  - { name: vmImageName, value: 'ubuntu-latest' }


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        dotnet tool install --global GitVersion.Tool
        dotnet gitversion /output buildserver
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(GitVersion.NuGetVersionV2)
          $(build.buildid)

    - publish: $(Build.SourcesDirectory)/content-web/deploy
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: ${{ eq(variables.deployAfterBuild, true) }}
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: 'conference-app'
              manifests: |
                $(Pipeline.Workspace)/manifests/conference-app-namespace.yml

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: 'deploy'
              kubernetesServiceConnection: $(kubernetesServiceConnection)
              namespace: 'conference-app'
              manifests: |
                $(Pipeline.Workspace)/manifests/content-web-deploy.yml
                $(Pipeline.Workspace)/manifests/content-web-service.yml
              containers: '$(containerRegistry)/$(imageRepository):$(build.buildid)'

